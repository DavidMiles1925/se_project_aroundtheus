!function(){"use strict";var e=class{constructor(e,t){this._settings=e,this._formElement=t}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.setAttribute("disabled",!0),this._buttonElement.classList.add(this._settings.inactiveButtonClass)):(this._buttonElement.removeAttribute("disabled"),this._buttonElement.classList.remove(this._settings.inactiveButtonClass))}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._fieldsetElement.querySelector(`.${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_handleInputChange(e){this._checkInputValidity(e),this._toggleButtonState()}_setEventListeners(){this._inputList=[...this._fieldsetElement.querySelectorAll(this._settings.inputSelector)],this._buttonElement=this._fieldsetElement.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>this._handleInputChange(e)))}))}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._fieldsetElement=this._formElement.querySelector(this._settings.formFieldsetSelector),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}};const t={formSelector:".form",formFieldsetSelector:".form__fieldset",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};const s=document.querySelector(".body");var r=class{constructor(e){this._popupElement=e,this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._handleEscCloseBound=this._handleEscClose.bind(this),this._handleRemoteClickCloseBound=this._handleRemoteClickClose.bind(this),this._closePopupBound=this.close.bind(this)}open(){s.classList.remove("preload"),this._popupElement.classList.add("modal_open"),this._setEventListeners()}close(){this._popupElement.classList.remove("modal_open"),this._removeEventListeners()}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleRemoteClickClose(e){e.target===e.currentTarget&&this.close()}_setEventListeners(){document.addEventListener("keydown",this._handleEscCloseBound),this._popupElement.addEventListener("mousedown",this._handleRemoteClickCloseBound),this._closeButton.addEventListener("click",this._closePopupBound)}_removeEventListeners(){document.removeEventListener("keydown",this._handleEscCloseBound),this._popupElement.removeEventListener("mousedown",this._handleRemoteClickCloseBound),this._closeButton.removeEventListener("click",this._closePopupBound)}};var i=class extends r{constructor(e,t){var s,r,i;super(e),s=this,i=e=>{e.preventDefault();const t=this._getInputValues();this._onSubmit(t)},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_handleSubmit"))in s?Object.defineProperty(s,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):s[r]=i,this._onSubmit=t,this._formSelector=this._popupElement.querySelector(".form"),this._submitButton=this._popupElement.querySelector(".form__submit-button"),this.currentButtonText=this._submitButton.textContent}_getInputValues(){const e=[...this._formSelector.querySelectorAll(".form__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}_setEventListeners(){super._setEventListeners(),this._formSelector.addEventListener("submit",this._handleSubmit)}_removeEventListeners(){super._removeEventListeners(),this._formSelector.removeEventListener("submit",this._handleSubmit)}close(){super.close(),this._popupElement.querySelector(".form").reset()}toggleIsSaving(e){this._submitButton.textContent=e?"Saving...":this.currentButtonText}};const n=document.querySelector(".modal_profile"),o=document.querySelector(".modal_add-card"),a=document.querySelector(".modal_profile-picture"),l=document.querySelector(".modal_display-image"),h=document.querySelector(".modal_confirm"),u=n.querySelector(".form"),c=o.querySelector(".form"),_=a.querySelector(".form"),d=document.querySelector(".profile"),m=d.querySelector(".profile__edit-button"),p=d.querySelector(".profile__add-button"),v=d.querySelector(".profile__image-button"),f=n.querySelector(".form__input_type_name"),g=n.querySelector(".form__input_type_about");let S;const E=new class{constructor(e,t){var s,r,i;s=this,i=e=>e.ok?e.json():(console.log(`Error: ${e.status}`),Promise.reject(`Error: ${e.status}`)),(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_processServerResponse"))in s?Object.defineProperty(s,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):s[r]=i,this._baseURL=e,this._authToken=t,this._headers={authorization:t,"Content-Type":"application/json"}}getInitialCards(){return fetch(`${this._baseURL}/cards`,{method:"GET",headers:this._headers}).then(this._processServerResponse)}getUserInfo(){return fetch(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers}).then(this._processServerResponse)}getApiInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()]).then(this._processServerResponse)}setUserInfo(e){return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._processServerResponse)}setAvatar(e){return fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._processServerResponse)}addCard(e){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link,likes:e.likes})}).then(this._processServerResponse)}deleteCard(e){return fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processServerResponse)}addLike(e){return fetch(`${this._baseURL}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._processServerResponse)}removeLike(e){return fetch(`${this._baseURL}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._processServerResponse)}}("https://around.nomoreparties.co/v1/group-12","cd0a9a45-f29d-487c-ac51-4b9d290460ac"),b=new class{constructor(e,t){this._renderer=e,this._cardsDisplayed=document.querySelector(t)}renderItems(e){e.forEach((e=>{const t=this._renderer(e);this._cardsDisplayed.append(t)}))}addItem(e){const t=this._renderer(e);this._cardsDisplayed.prepend(t)}}((function(e){return new class{constructor(e,t,s,r,i,n){this._name=e.name,this._link=e.link,this._alt=e.name,this._likes=e.likes,this._id=e._id,this._ownerId=e.owner._id,this._userId=n,this._cardSelector=t,this._handleLike=s,this._handleImageClick=r,this._deleteCard=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardText=this._element.querySelector(".card__title"),this._cardLikes=this._element.querySelector(".card__likes"),this._cardText.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._alt,this._cardLikes.textContent=this._likes.length,this._heartButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._imageButton=this._element.querySelector(".card__image"),this._assignCardButtons(),this._ownerId!==this._userId&&this._deleteButton.remove(),this._renderLikes(),this._element}_assignCardButtons(){this._heartButton.addEventListener("click",(()=>this._handleLike(this))),this._deleteButton.addEventListener("click",(()=>this._deleteCard(this))),this._imageButton.addEventListener("click",(()=>this._handleImageClick(this._name,this._link)))}isLiked(){return this._likes.some((e=>this._userId===e._id))}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this.isLiked()?this._heartButton.classList.add("card_liked"):this._heartButton.classList.remove("card_liked"),this._cardLikes.textContent=this._likes.length}handleDeleteLocalCard(){this._element.remove(),this._element=null}}(e,"#card",$,P,T,S).getCardElement()}),".cards"),y=new class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._picture=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e,t){this._name.textContent=e,this._about.textContent=t}setProfilePicture(e){this._picture.src=e}}(".profile__title",".profile__description",".profile__image"),L=new class extends r{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._modalImageDescription=this._popupElement.querySelector(".modal__image-desctription")}open(e,t){super.open(),this._image.alt=e,this._image.src=t,this._modalImageDescription.textContent=e}}(l,x),k=new i(n,(function(e){k.toggleIsSaving(!0),E.setUserInfo(e).then((()=>{y.setUserInfo(e.name,e.about),k.close()})).catch((e=>{console.log(`Error: ${e.status}`)})).finally((()=>{k.toggleIsSaving(!1)}))})),C=new i(o,(function(e){C.toggleIsSaving(!0),E.addCard(e).then((e=>{b.addItem(e)})).catch((e=>{console.log(`Error: ${e.status}`)})).finally((()=>{C.toggleIsSaving(!1),C.close()}))})),I=new i(a,x),B=new class extends r{constructor(e){super(e),this._formSelector=this._popupElement.querySelector(".form"),this._submitButton=this._popupElement.querySelector(".form__submit-button"),this.currentButtonText=this._submitButton.textContent}setEventListeners(){super._setEventListeners(),this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}setSubmit(e){this._handleSubmit=e}toggleIsSaving(e){this._submitButton.textContent=e?"Saving...":this.currentButtonText}}(h);B.setEventListeners();const q=new e(t,u),w=new e(t,c),R=new e(t,_);function x(e){I.toggleIsSaving(!0),E.setAvatar(e.avatar).catch((e=>{console.log(`Error: ${e.status}`)})),y.setProfilePicture(e.avatar),I.close(),I.toggleIsSaving(!1)}function P(e,t){L.open(e,t)}function T(e){B.open(),B.setSubmit((()=>{B.toggleIsSaving(!0),E.deleteCard(e._id).then((()=>{e.handleDeleteLocalCard(),B.close()})).catch((e=>{console.log(`Error: ${e.status}`)})).finally((()=>{B.toggleIsSaving(!0)}))}))}function $(e){e.isLiked()?E.removeLike(e._id).then((t=>e.updateLikes(t.likes))).catch((e=>{console.log(`Error: ${e.status}`)})):E.addLike(e._id).then((t=>e.updateLikes(t.likes))).catch((e=>{console.log(`Error: ${e.status}`)}))}q.enableValidation(),w.enableValidation(),R.enableValidation(),Promise.all([E.getUserInfo(),E.getInitialCards()]).then((e=>{let[t,s]=e;S=t._id,y.setProfilePicture(t.avatar),y.setUserInfo(t.name,t.about),b.renderItems(s)})).catch((e=>{console.log(e)})),m.addEventListener("click",(function(){!function(){const e=y.getUserInfo();f.value=e.name,g.value=e.about}(),k.open(),q.resetValidation()})),p.addEventListener("click",(function(){C.open(),w.resetValidation()})),v.addEventListener("click",(function(){I.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,